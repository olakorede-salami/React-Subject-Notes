{"version":3,"sources":["Components/Header.js","Components/Subjects.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","Subjects","resetUserInput","setState","title","text","state","handleChange","bind","handleSubmit","event","titleOfSubject","target","name","textInput","value","this","preventDefault","subjectSubmit","axios","url","method","data","then","console","log","catch","props","onChange","onSubmit","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2OAaeA,MAVf,WACI,OACI,yBAAKC,UAAY,UACb,wBAAIC,GAAK,gBAAT,iBACA,wBAAIA,GAAK,kBAAT,Q,wDCsEGC,E,kDAzEX,aAAc,IAAD,8BACT,gBAsCJC,eAAiB,WACb,EAAKC,SAAS,CACVC,MAAO,GACPC,KAAM,MAxCV,EAAKC,MAAQ,CACTF,MAAO,GACPC,KAAM,IAEV,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPX,E,yDAUAE,GACT,IAAMC,EAAiBD,EAAME,OAAOC,KAC9BC,EAAYJ,EAAME,OAAOG,MAC/BC,KAAKb,SAAS,CACVC,MAAOO,EACPN,KAAMS,M,mCAIDJ,GAAO,IAAD,OACfA,EAAMO,iBACN,IAEMC,EAAgB,CAClBd,MAHmBY,KAAKV,MAAMF,MAI9BC,KAHcW,KAAKV,MAAMD,MAM7Bc,IAAM,CACFC,IAAK,+CACLC,OAAQ,OACRC,KAAMJ,IAETK,MAAK,WACFC,QAAQC,IAAI,qCACZ,EAAKvB,oBACRwB,OAAM,kBAAMF,QAAQC,IAAI,+B,+BAYzB,OADAD,QAAQC,IAAI,UAAWT,KAAKV,OAExB,yBAAKP,UAAU,SACX,wBAAIC,GAAK,eACTe,MAASC,KAAKV,MAAMF,MACpBS,KAAQG,KAAKW,MAAMd,MACjBG,KAAKW,MAAMd,MACb,8BACAE,MAASC,KAAKV,MAAMD,KACpBQ,KAAQG,KAAKW,MAAMd,KACnBe,SAAYZ,KAAKT,eACjB,0BAAMsB,SAAYb,KAAKP,cACnB,2BACAqB,KAAO,SACPf,MAAQ,OACRhB,UAAU,iB,GA/DPgC,IAAMC,WCyBdC,MAtBf,WACE,OACE,yBAAKlC,UAAU,OACjB,gCACE,kBAAC,EAAD,OAEF,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAUc,KAAO,uBACjB,kBAAC,EAAD,CAAUA,KAAO,qBACjB,kBAAC,EAAD,CAAUA,KAAO,UACjB,kBAAC,EAAD,CAAUA,KAAO,cACjB,kBAAC,EAAD,CAAUA,KAAO,YACjB,kBAAC,EAAD,CAAUA,KAAO,YACjB,kBAAC,EAAD,CAAUA,KAAO,OACjB,kBAAC,EAAD,CAAUA,KAAO,YACjB,kBAAC,EAAD,CAAUA,KAAO,UCTDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.e1a617fd.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Header() {\n    return(\n        <div className = \"header\">\n            <h1 id = \"subject-main\">Subject Notes</h1>\n            <h3 id = \"subject-inital\">JS</h3>\n        </div>\n    )\n}\n\n\nexport default Header","import React from 'react';\nimport axios from 'axios';\n\nclass Subjects extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            title: '',\n            text: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        const titleOfSubject = event.target.name\n        const textInput = event.target.value\n        this.setState({\n            title: titleOfSubject,\n            text: textInput\n        })\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n        const titleOfSubject = this.state.title;\n        const textInput = this.state.text;\n        const subjectSubmit = {\n            title: titleOfSubject,\n            text: textInput\n        };\n\n        axios({\n            url: 'https://olakorede-salami.github.io/test/save',\n            method: 'POST',\n            data: subjectSubmit\n        })\n        .then(() => {\n            console.log(\"Data has been sent to the server!\")\n            this.resetUserInput()})\n        .catch(() => console.log(\"Internal server error!\"));\n    }\n\n    resetUserInput = () => {\n        this.setState({\n            title: '',\n            text: ''\n        })\n    }\n\n    render(){\n        console.log(\"State: \", this.state)\n        return(\n            <div className=\"whole\">\n                <h1 id = \"subject-name\" \n                value = {this.state.title}\n                name = {this.props.name}\n                >{this.props.name}</h1>\n                <textarea \n                value = {this.state.text}\n                name = {this.props.name}\n                onChange = {this.handleChange} />\n                <form onSubmit = {this.handleSubmit}>\n                    <input\n                    type = \"submit\"\n                    value = \"Send\"\n                    className=\"button\" \n                    />\n                </form>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default Subjects","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport Subjects from './Components/Subjects'\n\n\nfunction App(){\n  return(\n    <div className=\"App\">\n  <header>\n    <Header />\n  </header>\n  <div className=\"subject\">\n    <Subjects name = \"English Literature\"/>\n    <Subjects name = \"English Language\"/>\n    <Subjects name = \"Maths\"/>\n    <Subjects name = \"Chemistry\"/>\n    <Subjects name = \"Physics\"/>\n    <Subjects name = \"Biology\"/>\n    <Subjects name = \"RE\"/>\n    <Subjects name = \"History\"/>\n    <Subjects name = \"DT\"/>\n  </div>\n  </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}